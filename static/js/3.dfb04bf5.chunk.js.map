{"version":3,"sources":["../node_modules/redux-form/es/Form.js","../node_modules/redux-form/es/formValueSelector.js","../node_modules/redux-form/es/createFormValueSelector.js","Hoc/withAuthRedirect.tsx","Profile/DescriptionProfileData.module.css","Profile/Profile.module.css","Profile/DescriptionProfile.module.css","Profile/Post.module.css","Profile/ProfileStatusWithHook.tsx","Profile/DescriptionProfileData.tsx","Profile/DescriptionProfileForm.tsx","Profile/DescriptionProfile.tsx","Profile/Post.tsx","Profile/MyPosts.tsx","Profile/MyPostsContainer.tsx","Profile/Profile.tsx","Profile/ProfileContainer.tsx"],"names":["Form","_Component","props","_this","call","this","_reduxForm","Error","_inheritsLoose","_proto","prototype","UNSAFE_componentWillMount","registerInnerOnSubmit","onSubmit","render","_this$props","rest","_objectWithoutPropertiesLoose","React","createElement","Component","propTypes","PropTypes","func","isRequired","object","withReduxForm","createFormValueSelector","_ref","getIn","form","getFormState","invariant","nonNullGetFormState","state","_len","arguments","length","fields","Array","_key","reduce","accumulator","field","value","undefined","plain","setIn","mapStateToPropsRedirect","isAuth","auth","withAuthRedirect","WrappedComponent","connect","restprops","to","module","exports","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","autoFocus","onBlur","updateUserStatus","Contact","contactTitle","contactValue","className","s","contact","DescriptionProfileData","profile","onEditClick","profileData","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","Object","keys","contacts","map","key","DescriptionProfileForm","handleSubmit","hasLookingJob","error","type","style","formSummaryError","createField","Input","Textarea","DescriptionProfileFormRedux","reduxForm","selector","formValueSelector","DescriptionProfile","isOwner","savePhoto","updateProfileData","updateProfileSuccess","container","mainPhoto","src","photos","large","userPhoto","alt","inputFile","htmlFor","input","id","target","files","description","initialValues","formData","ProfileStatusWithHook","Post","post","message","likesCount","maxLength","maxLengthCreator","AddNewPostFormRedux","requiredField","MyPostsMemorized","memo","posts","p","values","addPost","newPostText","MyPostsContainer","profilePage","actions","addPostActionCreator","MyPosts","Profile","ProfileContainer","match","params","userId","authorizedUserId","history","push","getUserProfile","getUserStatus","refreshProfile","prevProps","prevState","compose","withRouter"],"mappings":"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","file":"static/js/3.dfb04bf5.chunk.js","sourcesContent":["import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nimport _inheritsLoose from \"@babel/runtime/helpers/inheritsLoose\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withReduxForm } from './ReduxFormContext';\n\nvar Form = /*#__PURE__*/function (_Component) {\n  _inheritsLoose(Form, _Component);\n\n  function Form(props) {\n    var _this;\n\n    _this = _Component.call(this, props) || this;\n\n    if (!props._reduxForm) {\n      throw new Error('Form must be inside a component decorated with reduxForm()');\n    }\n\n    return _this;\n  }\n\n  var _proto = Form.prototype;\n\n  _proto.UNSAFE_componentWillMount = function UNSAFE_componentWillMount() {\n    this.props._reduxForm.registerInnerOnSubmit(this.props.onSubmit);\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        _reduxForm = _this$props._reduxForm,\n        rest = _objectWithoutPropertiesLoose(_this$props, [\"_reduxForm\"]);\n\n    return /*#__PURE__*/React.createElement(\"form\", rest);\n  };\n\n  return Form;\n}(Component);\n\nForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n  _reduxForm: PropTypes.object\n};\nexport default withReduxForm(Form);","import createFormValueSelector from './createFormValueSelector';\nimport plain from './structure/plain';\nexport default createFormValueSelector(plain);","import invariant from 'invariant';\nimport plain from './structure/plain';\nexport default function createFormValueSelector(_ref) {\n  var getIn = _ref.getIn;\n  return function (form, getFormState) {\n    invariant(form, 'Form value must be specified');\n\n    var nonNullGetFormState = getFormState || function (state) {\n      return getIn(state, 'form');\n    };\n\n    return function (state) {\n      for (var _len = arguments.length, fields = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        fields[_key - 1] = arguments[_key];\n      }\n\n      invariant(fields.length, 'No fields specified');\n      return fields.length === 1 ? // only selecting one field, so return its value\n      getIn(nonNullGetFormState(state), form + \".values.\" + fields[0]) : // selecting many fields, so return an object of field values\n      fields.reduce(function (accumulator, field) {\n        var value = getIn(nonNullGetFormState(state), form + \".values.\" + field);\n        return value === undefined ? accumulator : plain.setIn(accumulator, field, value);\n      }, {});\n    };\n  };\n}","import {Redirect} from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\n\r\nlet mapStateToPropsRedirect = (state: AppStateType)=>({\r\n    isAuth: state.auth.isAuth\r\n})\r\ntype MapPropsType = {\r\n    isAuth: boolean\r\n}\r\nexport function withAuthRedirect<WCP>(WrappedComponent: React.ComponentType<WCP>){\r\n    const RedirectComponent: React.FC<MapPropsType> = (props) => {\r\n        let {isAuth, ...restprops} = props\r\n        if (!isAuth) return <Redirect to={'/login'}/>\r\n        return <WrappedComponent {...restprops as WCP} />\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent=connect(mapStateToPropsRedirect)(RedirectComponent);\r\n    return ConnectedAuthRedirectComponent;\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileData\":\"DescriptionProfileData_profileData__2DRo0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__1-lc5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"DescriptionProfile_container__1r8rv\",\"description\":\"DescriptionProfile_description__2tT6k\",\"mainPhoto\":\"DescriptionProfile_mainPhoto__1WLjq\",\"input\":\"DescriptionProfile_input__1LKRn\",\"inputFile\":\"DescriptionProfile_inputFile__3H88w\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"Post_post__BSg01\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\r\n\r\ntype PropsType = {\r\n    status: string\r\n    updateUserStatus: (status: string)=> void\r\n}\r\nconst ProfileStatusWithHooks: React.FC<PropsType> =(props)=>{\r\n\r\n    let [editMode, setEditMode ] = useState(false)\r\n    let [status, setStatus ] = useState(props.status)\r\n\r\n    useEffect(()=>{setStatus(props.status)},[props.status])\r\n\r\n\r\nconst activateEditMode=()=>{setEditMode(true)}\r\n\r\n    const deactivateEditMode=()=>{\r\n    setEditMode(false)\r\n    props.updateUserStatus(status);\r\n\r\n}\r\n\r\n    const onStatusChange=(e: ChangeEvent<HTMLInputElement>)=>{setStatus(e.currentTarget.value)}\r\n\r\n    return (\r\n       <div>\r\n           {!editMode &&\r\n           <div>\r\n               <span onDoubleClick={activateEditMode}>{props.status || '-----'}</span>\r\n           </div>  }\r\n           {editMode &&\r\n           <div>\r\n               <input onChange={onStatusChange} autoFocus={true}\r\n                      onBlur={deactivateEditMode} value={status}></input>\r\n           </div>}\r\n       </div>\r\n    )\r\n}\r\n\r\nexport default  ProfileStatusWithHooks;","import React from 'react';\r\nimport s from './DescriptionProfileData.module.css';\r\nimport {ContactsType, ProfileType} from \"../Types/types\";\r\n\r\ntype PropsType = {\r\n    profile: ProfileType\r\n    onEditClick: ()=> void\r\n}\r\n\r\nconst DescriptionProfileData: React.FC<PropsType> = ({profile, onEditClick}) => {\r\n\r\n    return (\r\n        <div className={s.profileData}>\r\n            <button onClick={onEditClick}>Edit</button>\r\n\r\n                <div>\r\n                    Full name: {profile.fullName}\r\n                </div>\r\n                <div>\r\n                    Looking for a job: {profile.lookingForAJob ? \"Yes\" : \"No\"}\r\n                </div>\r\n                {profile.lookingForAJob &&\r\n                <div>\r\n                   My professional skills: {profile.lookingForAJobDescription}\r\n                </div>\r\n                }\r\n                <div>\r\n                    About me: {profile.aboutMe}\r\n                </div>\r\n                <div>\r\n                    Contacts:\r\n                    { Object.keys(profile.contacts).map(key=>\r\n                        <Contact key={key} contactTitle={key} contactValue={profile.contacts[key as keyof ContactsType] }  />\r\n                    )}\r\n\r\n                </div>\r\n        </div>\r\n\r\n)\r\n}\r\n\r\ntype ContactsPropsType={\r\n    contactTitle: string\r\n    contactValue: string\r\n}\r\nconst Contact: React.FC<ContactsPropsType> = ({contactTitle, contactValue}) =>{\r\n    return  <>\r\n        <div className={s.contact}><b>{contactTitle}</b>: {contactValue}</div>\r\n    </>\r\n\r\n}\r\n\r\nexport default  DescriptionProfileData;","import React from 'react';\r\nimport s from './DescriptionProfileData.module.css';\r\nimport {Form, formValueSelector, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {createField, GetStringKeys, Input, Textarea} from \"../common/FormsControls/FormsControls\";\r\nimport {connect} from \"react-redux\";\r\nimport style from \"../common/FormsControls/FormControls.module.css\";\r\nimport {ProfileType} from \"../Types/types\";\r\n\r\n\r\ntype PropsType ={\r\n    hasLookingJob: boolean\r\n    profile: ProfileType\r\n}\r\ntype ProfileTypeKeys = GetStringKeys<ProfileType>\r\n\r\nlet DescriptionProfileForm: React.FC<InjectedFormProps<ProfileType, PropsType> & PropsType> = ({handleSubmit, hasLookingJob, profile, error}) => {\r\n\r\n    return (\r\n        <Form onSubmit={handleSubmit} >\r\n            <button type=\"submit\" >Submit</button>\r\n            {error && <div className={style.formSummaryError}> {error}</div> }\r\n                <div>\r\n                    Full name:\r\n                    {createField<ProfileTypeKeys>(\"name\", \"fullName\",\r\n                        [], Input,\"\", \"\"  )}\r\n                </div>\r\n                <div>\r\n                    Looking for a job:\r\n                    {createField<ProfileTypeKeys>(\"\", \"lookingForAJob\",\r\n                        [], Input,\"checkbox\", \"\"  )}\r\n                </div>\r\n                { hasLookingJob &&\r\n                <div>\r\n                   My professional skills:\r\n                    {createField<ProfileTypeKeys>(\"name\", \"lookingForAJobDescription\",\r\n                    [], Textarea,\"\", \"\"  )}\r\n                </div>\r\n                }\r\n                <div>\r\n                     About me:\r\n                    {createField<ProfileTypeKeys>(\"name\", \"aboutMe\",\r\n                        [], Textarea,\"\", \"\"  )}\r\n                </div>\r\n                <div>\r\n                    Contacts:\r\n                    { Object.keys(profile.contacts).map(key=>{\r\n                      return  <div key={key} className={s.contact}>\r\n                          <b>{key}: </b> {createField(key, `contacts.${key}`, [],Input, \"\", \"\")}\r\n                      </div>}\r\n                    )}\r\n                </div>\r\n        </Form>\r\n\r\n)\r\n}\r\nconst DescriptionProfileFormRedux = reduxForm<ProfileType, PropsType>({form: \"profileForm\"})(DescriptionProfileForm);\r\n\r\nconst selector = formValueSelector('profileForm')\r\nDescriptionProfileForm = connect(state => {\r\n    // can select values individually\r\n    const hasLookingJob = selector(state, 'lookingForAJob')\r\n    return {\r\n        hasLookingJob\r\n    }\r\n})(DescriptionProfileForm)\r\n\r\nexport default  DescriptionProfileFormRedux;","import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport s from './DescriptionProfile.module.css';\r\nimport Preloader from \"../common/preloader/preloader\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHook\";\r\nimport userPhoto from \"./../assets/images/user.png\";\r\nimport DescriptionProfileData from \"./DescriptionProfileData\";\r\nimport DescriptionProfileForm from \"./DescriptionProfileForm\";\r\nimport {ProfileType} from \"../Types/types\";\r\nimport {Card} from \"antd\";\r\n\r\ntype PropsType ={\r\n    profile: ProfileType\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File)=> void\r\n    updateProfileData: (profile: ProfileType)=> void\r\n    updateProfileSuccess: boolean\r\n}\r\n\r\nconst DescriptionProfile: React.FC<PropsType> = ({profile, status, updateUserStatus, isOwner, savePhoto, updateProfileData, updateProfileSuccess}) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    useEffect(()=>{setEditMode(false)},[updateProfileSuccess])\r\n    const onSubmitProfileForm = (formData: ProfileType)=>{\r\n        updateProfileData(formData);\r\n    }\r\n   const onChangeMainPhoto = (e: ChangeEvent<HTMLInputElement> ) =>{\r\n       if(e.target.files?.length){\r\n           savePhoto(e.target.files[0]);\r\n       }\r\n\r\n   }\r\n   const onEditClick=()=>{\r\n       setEditMode(true);\r\n   }\r\n    if(!profile){\r\n        return <Preloader />\r\n}\r\n\r\n    // @ts-ignore\r\n    // @ts-ignore\r\n    return (\r\n            <div className={s.container}>\r\n            <div className={s.mainPhoto}>\r\n                      <img src={profile.photos.large || userPhoto} alt=\"avatar\" />\r\n                {isOwner && <div className={s.inputFile}><label htmlFor=\"file\">Change photo<input className={s.input} type={\"file\"} id=\"file\" onChange={onChangeMainPhoto}/> </label></div>}\r\n                       \r\n                </div>\r\n                <div className={s.description}>\r\n                {(isOwner && editMode) ? // @ts-ignore\r\n                    <DescriptionProfileForm initialValues={profile} onSubmit={onSubmitProfileForm} profile={profile}/> :\r\n               <DescriptionProfileData profile={profile} onEditClick={onEditClick}/>}\r\n                <ProfileStatusWithHooks  status={status} updateUserStatus={updateUserStatus}/>\r\n                    </div>\r\n            </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default  DescriptionProfile;","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\ntype PropsType ={\r\n    message: string\r\n    likesCount:  number\r\n}\r\nconst Post: React.FC<PropsType> = (props) => {\r\n    return (\r\n        <div className={s.post}>\r\n            <img src='https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcTjFuRKL7FBeTCFDumTAxgm3D7JtHmGeRo5ML4rTEKJq482e2T9&usqp=CAU'/>\r\n            <span>{props.message}</span>\r\n            <br/>\r\n            <span>likest:</span> {props.likesCount}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default  Post;","import React from 'react';\r\nimport Post from './Post';\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, requiredField} from \"../utils/validators/validators\";\r\nimport {createField, GetStringKeys, Textarea} from \"../common/FormsControls/FormsControls\";\r\nimport {PostType} from \"../Types/types\";\r\n\r\n\r\nconst maxLength = maxLengthCreator(10);\r\n\r\nexport type MapPropsType = {\r\n    posts: Array<PostType>\r\n}\r\n\r\nexport type DispatchPropsType = {\r\n    addPost: (post: string)=>void\r\n}\r\n\r\nconst MyPosts: React.FC<MapPropsType & DispatchPropsType> = (props) =>{\r\n\r\n    let posts = props.posts.map((p)=><Post message={p.message} likesCount={p.likesCount} /> );\r\n    let onAddPost = (values: AddNewPostFormValuesType) => {\r\n        props.addPost(values.newPostText);\r\n    };\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n            Posts+desc\r\n            </div>\r\n            <div>\r\n            <AddNewPostFormRedux onSubmit={onAddPost} />\r\n            </div>\r\n            {posts}\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\ntype  AddNewPostFormValuesType ={\r\n    newPostText: string\r\n}\r\n\r\ntype AddNewPostFormOwnProps ={}\r\n\r\ntype AddNewPostFormTypeKeys = GetStringKeys<AddNewPostFormValuesType>\r\n\r\nconst AddNewPostForm\r\n    : React.FC<InjectedFormProps<AddNewPostFormValuesType, AddNewPostFormOwnProps> & AddNewPostFormOwnProps> = (props) =>{\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            {createField<AddNewPostFormTypeKeys>\r\n            (\"Enter message\", \"newPostText\", [requiredField, maxLength], Textarea, \"\")}\r\n            <button>Add</button>\r\n        </form>\r\n\r\n    )\r\n}\r\nconst AddNewPostFormRedux = reduxForm<AddNewPostFormValuesType, AddNewPostFormOwnProps>({form: 'profileAddNewPostForm'})(AddNewPostForm);\r\n\r\nconst MyPostsMemorized = React.memo(MyPosts);\r\nexport default  MyPostsMemorized","import React from 'react';\r\nimport {actions} from \"../redux/redusers/profileRedusers\";\r\nimport MyPosts, {DispatchPropsType, MapPropsType} from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\n\r\n\r\nconst mapStateToProps =(state: AppStateType)=>{\r\nreturn{\r\n    posts: state.profilePage.posts,\r\n\r\n}\r\n}\r\n\r\n\r\n\r\nconst MyPostsContainer = connect<MapPropsType, DispatchPropsType, {}, AppStateType>(mapStateToProps, {addPost: actions.addPostActionCreator})(MyPosts)\r\n\r\nexport default  MyPostsContainer;","import React from 'react';\r\nimport s from './Profile.module.css';\r\nimport DescriptionProfile from './DescriptionProfile';\r\nimport MyPostsContainer from \"./MyPostsContainer\";\r\nimport {ProfileType} from \"../Types/types\";\r\ntype PropsType ={\r\n    profile: ProfileType\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File)=> void\r\n    updateProfileData: (profile: ProfileType)=> void\r\n    updateProfileSuccess: boolean\r\n}\r\nconst Profile: React.FC<PropsType> = (props) => {\r\n    return (\r\n        <div>\r\n            <div className={s.profile}>\r\n              <DescriptionProfile profile={props.profile} status={props.status}\r\n                                  updateUserStatus={props.updateUserStatus} isOwner={props.isOwner}\r\n                                  savePhoto={props.savePhoto}\r\n                                  updateProfileData={props.updateProfileData}\r\n                                  updateProfileSuccess={props.updateProfileSuccess}/>\r\n           <MyPostsContainer />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default  Profile;","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    getUserProfile,\r\n    getUserStatus,\r\n    savePhoto,\r\n    updateProfileData,\r\n    updateUserStatus\r\n} from \"../redux/redusers/profileRedusers\";\r\nimport {withRouter, RouteComponentProps} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"../Hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {ProfileType} from \"../Types/types\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\n\r\n\r\n\r\ntype MapPropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    authorizedUserId: number | null\r\n    isAuth: boolean\r\n    updateProfileSuccess: boolean\r\n}\r\n\r\ntype DispatchPropsType = {\r\n    getUserProfile: (userId: number)=>void\r\n    getUserStatus:(userId: number)=>void\r\n    updateUserStatus:(status: string)=>void\r\n    savePhoto:(file: File)=>void\r\n    updateProfileData:(profile: ProfileType)=> Promise<any>\r\n    authorizedUserId: () => void\r\n}\r\ntype PathParamsType ={\r\n    userId: string\r\n}\r\n\r\n\r\ntype PropsType = MapPropsType & DispatchPropsType & RouteComponentProps<PathParamsType>;\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n       refreshProfile (){\r\n        let id: number | null = +this.props.match.params.userId;\r\n        if(!id){\r\n            id=this.props.authorizedUserId;\r\n            if(!id){\r\n                this.props.history.push(\"/login\")\r\n            }\r\n        }\r\n        this.props.getUserProfile(id as number);\r\n        this.props.getUserStatus(id as number);\r\n    }\r\n    componentDidMount() {\r\n        this.refreshProfile();\r\n    }\r\n   componentDidUpdate(prevProps: PropsType, prevState:PropsType) {\r\n        if(prevProps.match.params.userId!= this.props.match.params.userId)\r\n            this.refreshProfile();\r\n   }\r\n\r\n    render(){\r\n\r\n            return (\r\n                <Profile {...this.props}\r\n                         profile={this.props.profile as ProfileType}\r\n                         status={this.props.status}\r\n                         updateUserStatus={this.props.updateUserStatus}\r\n                         isOwner={!this.props.match.params.userId}\r\n                         savePhoto={this.props.savePhoto}\r\n                        /* authorizedUserId={this.props.authorizedUserId}*//>\r\n    )\r\n    }\r\n}\r\nlet mapStateToProps=(state: AppStateType)=>({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth,\r\n    updateProfileSuccess: state.profilePage.updateProfileSuccess\r\n\r\n})\r\n\r\nexport default compose<React.ComponentType>(\r\n    withAuthRedirect,\r\n    withRouter,\r\n    connect(mapStateToProps, {getUserProfile, getUserStatus, updateUserStatus, savePhoto, updateProfileData})\r\n)(ProfileContainer)"],"sourceRoot":""}
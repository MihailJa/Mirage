{"version":3,"sources":["Dialogs/Dialogs.module.css","Hoc/withAuthRedirect.tsx","Dialogs/DialogItem.tsx","Dialogs/Message.tsx","Dialogs/Dialogs.tsx","Dialogs/DialogsContainer.ts"],"names":["module","exports","mapStateToPropsRedirect","state","isAuth","auth","withAuthRedirect","WrappedComponent","connect","props","restprops","to","DialogItem","path","id","className","s","dialog","active","name","Message","message","maxLength","maxLengthCreator","AddNewMessageRedux","reduxForm","form","onSubmit","handleSubmit","createField","requiredField","Textarea","Dialogs","dialogs","dialogsPage","map","d","messages","m","dialogsItems","value","onSendMessage","newMessageBody","DialogsContainer","compose","actions","sendMessage"],"mappings":"iGACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,SAAW,0BAA0B,QAAU,2B,gHCIhGC,EAA0B,SAACC,GAAD,MAAwB,CAClDC,OAAQD,EAAME,KAAKD,SAKhB,SAASE,EAAsBC,GAQlC,OADmCC,YAAQN,EAARM,EANe,SAACC,GAAW,IACrDL,EAAwBK,EAAxBL,OAAWM,EADyC,YAC5BD,EAD4B,YAEzD,OAAKL,EACE,kBAACG,EAAqBG,GADT,kBAAC,IAAD,CAAUC,GAAI,gB,uGCM1BC,EAZwB,SAACH,GACrC,IAAII,EAAK,YAAcJ,EAAMK,GAC7B,OACQ,yBAAKC,UAAWC,IAAEC,OAAS,IAAID,IAAEE,QACjC,kBAAC,IAAD,CAASP,GAAIE,GAAOJ,EAAMU,QCOtBC,EAXqB,SAACX,GAClC,OACI,yBAAKM,UAAWC,IAAEK,SACbZ,EAAMY,U,0BCDbC,EAAYC,YAAiB,KAiD7BC,EAAoBC,YAA0C,CAACC,KAAK,iBAAhDD,EAXoE,SAAChB,GAC9F,OACI,0BAAMkB,SAAUlB,EAAMmB,cACjBC,YACA,qBAAsB,iBAAkB,CAACC,IAAeR,GAAYS,IAAU,IAE/E,4CAOOC,EArC4B,SAACvB,GAErC,IAAIwB,EAAUxB,EAAMyB,YAAYD,QAAQE,KAAI,SAACC,GAAD,OAAM,kBAAC,EAAD,CAAYjB,KAAMiB,EAAEjB,KAAML,GAAIsB,EAAEtB,QAClFuB,EAAW5B,EAAMyB,YAAYG,SAASF,KAAI,SAACG,GAAD,OAAO,kBAAC,EAAD,CAASjB,QAASiB,EAAEjB,aAMzE,OACI,yBAAKN,UAAWC,IAAEiB,SACd,yBAAKlB,UAAWC,IAAEuB,cACbN,GAEL,yBAAKlB,UAAWC,IAAEqB,UAChB,6BAAMA,GACH,kBAACb,EAAD,CAAoBG,SAVZ,SAACa,GACpB/B,EAAMgC,cAAcD,EAAME,sB,iBCjB1BC,EAAmBC,YACrBpC,aANmB,SAACL,GACpB,MAAO,CAAC+B,YAAa/B,EAAM+B,eAKF,CAACO,cAAeI,IAAQC,cACjDxC,IAFqBsC,CAGvBZ,GAEcW","file":"static/js/4.5e8d4146.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__kjJG7\",\"messages\":\"Dialogs_messages__2kog5\",\"message\":\"Dialogs_message__jhAjw\"};","import {Redirect} from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\n\r\nlet mapStateToPropsRedirect = (state: AppStateType)=>({\r\n    isAuth: state.auth.isAuth\r\n})\r\ntype MapPropsType = {\r\n    isAuth: boolean\r\n}\r\nexport function withAuthRedirect<WCP>(WrappedComponent: React.ComponentType<WCP>){\r\n    const RedirectComponent: React.FC<MapPropsType> = (props) => {\r\n        let {isAuth, ...restprops} = props\r\n        if (!isAuth) return <Redirect to={'/login'}/>\r\n        return <WrappedComponent {...restprops as WCP} />\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent=connect(mapStateToPropsRedirect)(RedirectComponent);\r\n    return ConnectedAuthRedirectComponent;\r\n}","import React from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype Propstype ={\r\n    id: number\r\n    name: string\r\n}\r\nconst DialogItem: React.FC<Propstype> = (props) => {\r\n    let path=\"/dialogs/\" + props.id;\r\n    return (\r\n            <div className={s.dialog + ' '+s.active}>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n            </div>\r\n\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default  DialogItem;","import React from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype Propstype ={\r\n    message: string\r\n}\r\n\r\nconst Message: React.FC<Propstype> = (props) => {\r\n    return (\r\n        <div className={s.message} >\r\n            {props.message}\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default  Message;","import React from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport DialogItem from './DialogItem';\r\nimport Message from './Message';\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {createField, Textarea} from \"../common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, requiredField} from \"../utils/validators/validators\";\r\nimport {DialogTypes, MessageTypes} from \"../redux/redusers/dialogsRedusers\";\r\n\r\n\r\nconst maxLength = maxLengthCreator(100);\r\n\r\ntype DialogsPropsType={\r\n    dialogsPage: {dialogs: Array<DialogTypes>,  messages: Array<MessageTypes>}\r\n    handleSubmit: ()=> void\r\n    onSendMessage: (newMessageBody: string)=> void\r\n}\r\n\r\nexport type NewMessageFormType ={\r\n    newMessageBody: string\r\n\r\n}\r\n\r\n\r\nconst Dialogs: React.FC<DialogsPropsType> = (props) => {\r\n    debugger;\r\n        let dialogs = props.dialogsPage.dialogs.map((d)=> <DialogItem name={d.name} id={d.id}/>);\r\n    let messages = props.dialogsPage.messages.map((m)=>  <Message message={m.message}/>);\r\n\r\n\r\nlet onSendMessageClick = (value: { newMessageBody: string }) => {\r\n      props.onSendMessage(value.newMessageBody);\r\n    }\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogs}\r\n            </div>\r\n            <div className={s.messages}>\r\n              <div>{messages}</div>\r\n                 <AddNewMessageRedux onSubmit={onSendMessageClick} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype NewMessageFormTypeKeys = Extract<keyof NewMessageFormType, string>\r\ntype PropsType={}\r\nconst AddNewMessage: React.FC<InjectedFormProps<NewMessageFormType & PropsType> & PropsType>= (props) => {\r\n return (\r\n     <form onSubmit={props.handleSubmit}>\r\n         {createField<NewMessageFormTypeKeys>\r\n         (\"enter your message\", \"newMessageBody\", [requiredField, maxLength], Textarea, \"\")}\r\n\r\n         <button>Send</button>\r\n     </form>\r\n )\r\n}\r\n\r\nconst AddNewMessageRedux= reduxForm<NewMessageFormType & PropsType>({form:\"addNewMessage\"})(AddNewMessage);\r\n\r\nexport default  Dialogs;\r\n\r\n","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {actions} from \"../redux/redusers/dialogsRedusers\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {withAuthRedirect} from \"../Hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\n\r\n\r\nconst mapStateToProps =(state: AppStateType)=>{\r\n    return {dialogsPage: state.dialogsPage\r\n    }\r\n}\r\n\r\nconst DialogsContainer = compose<React.ComponentType>(\r\n    connect(mapStateToProps, {onSendMessage: actions.sendMessage}),\r\n    withAuthRedirect\r\n)(Dialogs)\r\n\r\nexport default  DialogsContainer;"],"sourceRoot":""}
{"version":3,"sources":["common/preloader/preloader.tsx","utils/validators/validators.ts","Users/Users.module.css","Header/Header.module.css","common/Paginator/Paginator.module.css","redux/redusers/profileRedusers.ts","assets/images/user.png","api/api.ts","redux/redusers/dialogsRedusers.ts","assets/images/preloader.svg","common/preloader/preloader.module.css","assets/images/dzone.svg","serviceWorker.js","Navbar/Navbar.tsx","common/Paginator/Paginator.tsx","Users/User.tsx","Users/UsersSearchForm.tsx","utils/helpers/object-helpers.js","redux/redusers/usersReducer.ts","redux/redusers/users-selectors.ts","Users/UsersC.tsx","Users/UsersContainer.tsx","Header/Header.tsx","api/auth.api.ts","api/security.api.ts","redux/redusers/auth_reduser.ts","Header/HeaderContainer.tsx","Login/Login.tsx","redux/redusers/app_reduser.ts","redux/redusers/sidebarRedusers.ts","redux/redux-store.ts","Hoc/withSuspense.tsx","Footer/Footer.tsx","App.tsx","index.tsx","Navbar/Navbar.module.css","common/FormsControls/FormsControls.tsx","api/user.api.ts","api/profile.api.ts","common/FormsControls/FormControls.module.css"],"names":["Preloader","props","className","s","preloader","src","preloaderImg","requiredField","value","maxLengthCreator","length","module","exports","ADD_POST","SET_USER_PROFILE","SET_STATUS","initialState","posts","id","message","likesCount","profile","updateProfileSuccess","status","actions","addPostActionCreator","newPostText","type","setUserProfileAC","setStatus","savePhotoSuccess","photos","updateProfileDataSuccess","isSuccess","updateProfileDataSuccessDrop","getUserProfile","userId","dispath","a","userApi","getProfile","data","getUserStatus","profileApi","getStatus","updateUserStatus","updateStatus","resultCode","savePhoto","file","dispatch","updateProfileData","formData","getState","auth","Error","stopSubmit","_error","messages","profileReducer","state","action","post","ResultCodeEnum","ResultCodeForCaptcha","instance","axios","create","withCredentials","baseURL","headers","SEND_MESSAGE","dialogs","name","sendMessage","newMessageBody","dialogsReducer","body","Boolean","window","location","hostname","match","Navbar","Sider","navbar","width","theme","defaultSelectedKeys","mode","Item","key","icon","UserOutlined","item","to","activeClassName","active","FormOutlined","TeamOutlined","ReadOutlined","Paginator","totalItemsCount","pageSize","portionSize","onPageChanged","currentPage","pagesCount","Math","ceil","pages","i","push","portionCount","useState","portionNum","setPortionNum","leftDigit","rightDigit","paginator","onClick","filter","p","map","selectedPage","e","User","user","followingIsProgress","follow","unfollow","imgButtonBlock","small","userImg","followed","disabled","some","fullname","usersSearchFormValidate","values","UsersSearchForm","React","memo","onFilterChanged","isFetching","initialValues","term","friend","validate","onSubmit","as","updateObjectInArray","items","itemId","objPropName","newObjProps","u","FOLLOW","UNFOLLOW","SET_USERS","SET_FILTER","users","totalUsersCount","pageNumber","count","requestUsers","getUsers","totalCount","_followUnfollowFlow","apiMethod","actionCreator","usersReducer","usersPage","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingIsProgress","getFilter","Users","useSelector","useDispatch","useEffect","followCallback","bind","unfollowCallback","UsersPage","title","Header","header","logo","height","alt","loading","loginBlock","isAuth","login","logout","AuthApi","get","then","response","email","password","rememberMe","captcha","delete","securityApi","SET_USER_DATA","captchaUrl","payload","getAuthUserData","meData","Success","getCaptchaUrl","url","authReduser","HeaderContainer","this","Component","connect","LoginReduxForm","reduxForm","form","handleSubmit","error","createField","Input","undefined","style","formSummaryError","LoginPage","CaptchaIsRequired","initialized","appReduser","sidebarReducer","reducers","combineReducers","dialogsPage","profilePage","formReduser","app","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","withSuspense","WrappedComponent","Suspense","fallback","Footer","DialogsContainer","lazy","ProfileContainer","SuspendedDialogs","SuspendedProfile","App","catchAllUnhandledErrors","alert","console","addEventListener","initializeApp","removeEventListener","Content","exact","path","render","AppContainer","withRouter","MainApp","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","FormControl","meta","children","hasError","touched","formControl","Textarea","input","restprops","placeholder","validators","component","text","warn","put","FormData","append"],"mappings":"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","file":"static/js/main.7c259c78.chunk.js","sourcesContent":["import preloaderImg from '../../assets/images/preloader.svg';\r\nimport s from './preloader.module.css'\r\nimport React from \"react\";\r\ntype PropsType ={\r\n\r\n}\r\nconst Preloader: React.FC<PropsType>=(props)=> {\r\n    return (\r\n<div className={s.preloader}>\r\n    <img src={preloaderImg}/>\r\n</div>\r\n    )\r\n}\r\n\r\nexport default Preloader","export type ValidatorType =  (value: string)=> string | undefined\r\n\r\n\r\nexport const requiredField: ValidatorType =(value)=>{\r\nif(value) return undefined\r\n    return \"Field is required\"\r\n}\r\n\r\nexport const maxLengthCreator= (length: number): ValidatorType => (value) =>{\r\n    if(value && value.length >length) return `Max length is ${length} symbols`\r\n    return undefined\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"user\":\"Users_user__2hVeY\",\"imgButtonBlock\":\"Users_imgButtonBlock__2Fyih\",\"fullname\":\"Users_fullname__F9z4_\",\"location\":\"Users_location__4pMTw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1LA_G\",\"loginBlock\":\"Header_loginBlock__2T7b5\",\"login\":\"Header_login__3T69A\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"Paginator_paginator__z1lzI\",\"selectedPage\":\"Paginator_selectedPage__3i25Y\",\"pageN\":\"Paginator_pageN__1mtpf\"};","import {FormAction, stopSubmit} from \"redux-form\";\r\nimport {PhotosType, PostType, ProfileType} from \"../../Types/types\";\r\nimport {userApi} from \"../../api/user.api\";\r\nimport {profileApi} from \"../../api/profile.api\";\r\nimport {BaseThunkType, InferActionsTypes} from \"../redux-store\";\r\n\r\nconst ADD_POST='network/profile/ADD_POST';\r\nconst  SET_USER_PROFILE='network/profile/SET_USER_PROFILE';\r\nconst  SET_STATUS='network/profile/SET_STATUS';\r\nconst  SAVE_PHOTO_SUCCESS='network/profile/SAVE_PHOTO_SUCCESS';\r\nconst  UPDATE_PROFILE_DATA_SUCCESS='network/profile/UPDATE_PROFILE_DATA_SUCCESS'\r\n\r\n\r\n\r\nlet initialState= {\r\n        posts: [{id: 1, message: \"Hi\", likesCount: 10}, {id: 2, message: \"How are you?\", likesCount: 10},\r\n            {id: 3, message: \"Youoyo\", likesCount: 5}\r\n        ] as Array<PostType>,\r\n        profile: null as ProfileType | null,\r\n        updateProfileSuccess: false,\r\n        status: \"\"\r\n}\r\n\r\n\r\n    const profileReducer=(state=initialState, action: ActionsTypes): initialStateType =>{\r\n        switch(action.type)\r\n        {\r\n\r\n            case ADD_POST:\r\n                let message = action.newPostText\r\n                let post = {\r\n                    id: 4, message: message, likesCount: 0\r\n                }\r\n                return {\r\n                    ...state,\r\n                    posts:[...state.posts, post]\r\n                }\r\n            case SET_USER_PROFILE:\r\n                return {\r\n                    ...state,\r\n                    profile: action.profile\r\n                }\r\n            case SET_STATUS:\r\n                return {\r\n                    ...state,\r\n                    status: action.status\r\n                }\r\n\r\n            case SAVE_PHOTO_SUCCESS:\r\n                return {\r\n                    ...state,\r\n                    profile: {\r\n                        ...state.profile,\r\n                        photos: action.photos\r\n                    } as ProfileType\r\n\r\n                }\r\n            case UPDATE_PROFILE_DATA_SUCCESS:\r\n                    return {\r\n                        ...state,\r\n                        updateProfileSuccess: action.isSuccess\r\n                    }\r\n            default: return state;\r\n        }\r\n    }\r\n\r\n\r\n   export const actions = {\r\n       addPostActionCreator:(newPostText: string) =>({type: ADD_POST, newPostText} as const),\r\n       setUserProfileAC:(profile: ProfileType | null ) =>({type:SET_USER_PROFILE, profile} as const),\r\n       setStatus:(status: string)=>({type:SET_STATUS, status} as const),\r\n       savePhotoSuccess:(photos: PhotosType)=>({type:SAVE_PHOTO_SUCCESS, photos} as const),\r\n       updateProfileDataSuccess:()=>({type:UPDATE_PROFILE_DATA_SUCCESS, isSuccess:true} as const),\r\n       updateProfileDataSuccessDrop:()=>({type:UPDATE_PROFILE_DATA_SUCCESS, isSuccess:false} as const)\r\n   }\r\n\r\n\r\nexport const getUserProfile=(userId: number): ThunkType=> async (dispath) =>{\r\n      let data = await userApi.getProfile(userId)\r\n            dispath(actions.setUserProfileAC(data))\r\n}\r\n\r\nexport const getUserStatus=(userId: number): ThunkType=> async (dispath) =>{\r\n    let data = await profileApi.getStatus(userId)\r\n            dispath(actions.setStatus(data))\r\n}\r\n\r\nexport const updateUserStatus=(status: string): ThunkType=> async (dispath) =>{\r\n    let data = await profileApi.updateStatus(status)\r\n            if(data.resultCode===0) dispath(actions.setStatus(status))\r\n}\r\n\r\nexport const savePhoto=(file: File): ThunkType=> async (dispatch) =>{\r\n    let data = await profileApi.savePhoto(file)\r\n    if(data.resultCode===0)\r\n\r\n        dispatch(actions.savePhotoSuccess(data.data.photos))\r\n}\r\nexport const updateProfileData=(formData: ProfileType): ThunkType=> async (dispatch, getState) =>{\r\n    const userId = getState().auth.userId;\r\n    const data = await profileApi.updateProfileData(formData)\r\n    if(data.resultCode===0){\r\n        dispatch(actions.updateProfileDataSuccess())\r\n        if (userId!=null)\r\n        dispatch(getUserProfile(userId))\r\n        else\r\n            throw new Error('userId can`t be null')\r\n        dispatch(actions.updateProfileDataSuccessDrop())\r\n     }else {\r\n        dispatch(stopSubmit(\"profileForm\", {_error: data.messages[0]}))\r\n\r\n    }\r\n}\r\n\r\nexport default profileReducer;\r\n\r\nexport type initialStateType = typeof initialState\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsTypes | FormAction>","module.exports = __webpack_public_path__ + \"static/media/user.c1c6129c.png\";","import axios from 'axios';\r\nimport {UserType} from \"../Types/types\";\r\n\r\n\r\nexport const instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers:{\r\n        \"API-KEY\":\"1d81b50b-fdd8-41d0-b074-a7b4304f92be\"\r\n    }\r\n})\r\n\r\nexport enum ResultCodeEnum {\r\n    Success = 0,\r\n    Error =1,\r\n    CaptchaIsRequired=10\r\n}\r\nexport enum ResultCodeForCaptcha {\r\n    CaptchaIsRequired=10\r\n}\r\n\r\n\r\nexport type GetItemsType={\r\n    items: Array<UserType>\r\n    totalCount: number\r\n    error: string | null\r\n}\r\n\r\n\r\nexport type APIResponseType<D = {}, RC = ResultCodeEnum> = {\r\n    data: D\r\n    messages: Array<string>\r\n    resultCode: RC\r\n}","import { InferActionsTypes } from \"../redux-store\";\r\n\r\nconst SEND_MESSAGE='network/dialogs/SEND_MESSAGE';\r\n\r\nexport type MessageTypes ={\r\n    id: number\r\n    message: string\r\n}\r\n\r\nexport type DialogTypes ={\r\n    id: number\r\n    name: string\r\n}\r\n\r\nlet initialState = {\r\n        messages: [{id: 1, message: 'HIiiii'}, {id: 2, message: 'How are you?'},\r\n            {id: 3, message: 'Youoyo'}] as Array<MessageTypes>,\r\n        dialogs: [{id: 1, name: 'Yana'}, {id: 2, name: 'Nika'}, {id: 3, name: 'Dima'}] as Array<DialogTypes>,\r\n\r\n    }\r\n\r\n\r\n\r\nconst dialogsReducer=(state=initialState, action: ActionsType): initialStateType=>{\r\n    switch(action.type)\r\n    {\r\n        case SEND_MESSAGE:\r\n            let body= action.newMessageBody;\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, {id: 6, message: body}]\r\n            };\r\n        default: return state;\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    sendMessage: (newMessageBody: string)=> ({type:SEND_MESSAGE, newMessageBody } as const)\r\n}\r\n\r\n\r\nexport default dialogsReducer;\r\n\r\n\r\nexport type initialStateType = typeof initialState\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\n\r\n","module.exports = __webpack_public_path__ + \"static/media/preloader.cb55ad9b.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"preloader\":\"preloader_preloader__2Qsfh\"};","module.exports = __webpack_public_path__ + \"static/media/dzone.5589eda2.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport s from './Navbar.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {Layout, Menu} from \"antd\";\r\nimport {\r\n    DesktopOutlined,    \r\n    UserOutlined,\r\n    FormOutlined,\r\n    TeamOutlined,\r\n    ReadOutlined\r\n} from '@ant-design/icons';\r\n\r\n\r\nconst Navbar= () => {\r\n    return (\r\n        <Layout.Sider  className={s.navbar} width={200}>\r\n            <Menu theme=\"dark\" defaultSelectedKeys={['1']} mode=\"inline\">\r\n                <Menu.Item key=\"1\" icon={<UserOutlined />}>\r\n                    <span className={s.item}>\r\n                        <NavLink to='/profile' activeClassName={s.active}>Profile</NavLink>\r\n                    </span>\r\n                </Menu.Item>\r\n                <Menu.Item key=\"2\" icon={<FormOutlined />}>\r\n                    <span className={s.item}>\r\n                        <NavLink to='/dialogs' activeClassName={s.active}>Message</NavLink>\r\n                    </span>\r\n                </Menu.Item>\r\n                <Menu.Item key=\"3\" icon={<TeamOutlined />}>\r\n                    <span className={s.item}>\r\n                        <NavLink to='/users' activeClassName={s.active}>Users</NavLink>\r\n                    </span>\r\n                </Menu.Item>\r\n                <Menu.Item key=\"4\" icon={<ReadOutlined />}>\r\n                    <span className={s.item}>\r\n                        <NavLink to='/m' activeClassName={s.active}>News</NavLink>\r\n                    </span>\r\n                </Menu.Item>\r\n            </Menu>\r\n            {/*\r\n          <nav className={s.navbar}>\r\n              <div className={s.item}>\r\n               <NavLink to='/profile' activeClassName={s.active}>Profile</NavLink>\r\n              </div>\r\n              <div className={s.item}>\r\n                  <NavLink to='/dialogs' activeClassName={s.active}>Message</NavLink>\r\n              </div>\r\n              <div className={s.item}>\r\n              <NavLink to='/users' activeClassName={s.active}>Users</NavLink>\r\n              </div>\r\n              <div className={s.item}>\r\n                  <NavLink to='/m' activeClassName={s.active}>Main content</NavLink>\r\n              </div>\r\n\r\n          </nav> */}\r\n            </Layout.Sider>\r\n\r\n    )\r\n}\r\n\r\n\r\nexport default  Navbar;","import React, {useState} from 'react';\r\nimport s from './Paginator.module.css'\r\nimport {FilterType} from \"../../redux/redusers/usersReducer\";\r\n\r\ntype PropsType = {\r\n    totalItemsCount: number\r\n    pageSize: number\r\n    portionSize: number\r\n    onPageChanged: (pageNum: number) => void\r\n    currentPage?: number\r\n}\r\n\r\nconst Paginator: React.FC<PropsType> =({totalItemsCount, pageSize, portionSize, onPageChanged, currentPage})=> {\r\n    let pagesCount = Math.ceil(totalItemsCount/pageSize);\r\n    let onPageChangedClick =(pageNum: number)=>{\r\n        onPageChanged(pageNum);\r\n    }\r\n    let pages=[];\r\n    for(let i=1; i<=pagesCount; i++){\r\n        pages.push(i);\r\n    }\r\n\r\n  let portionCount = Math.ceil(pagesCount/portionSize)\r\n    let [portionNum, setPortionNum] = useState(1)\r\n    let leftDigit = (portionNum-1) * portionSize\r\n    let rightDigit = portionNum * portionSize\r\n\r\n    return <div className={s.paginator}>\r\n    {portionNum > 1 &&\r\n    <button onClick={() => setPortionNum(portionNum-1)}>Previous</button> }\r\n    { pages\r\n        .filter(p=> p>= leftDigit && p<=rightDigit)\r\n        .map(p=>{\r\n            return  <span className={currentPage===p ? s.selectedPage : \"\"}\r\n            key={p}\r\n            onClick={(e)=>{onPageChangedClick(p)}}>{p}</span> })\r\n        }\r\n        {portionCount > portionNum &&\r\n        <button onClick={() => setPortionNum(portionNum+1)}>Next</button> }\r\n\r\n\r\n        </div>\r\n}\r\n\r\nexport default Paginator;","import React from 'react';\r\nimport s from './Users.module.css';\r\nimport userImg from '../assets/images/user.png';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {UserType} from \"../Types/types\";\r\n\r\n\r\ntype PropsType = {\r\n    user: UserType\r\n    followingIsProgress: Array<number>\r\n    follow: (userId: number)=>void\r\n    unfollow: (userId: number)=>void\r\n}\r\n\r\n\r\nconst User: React.FC<PropsType> = ({user, followingIsProgress, follow, unfollow}) => {\r\n\r\n    return (<div>\r\n                    <div className={s.imgButtonBlock}>\r\n                        <NavLink to={'/profile/'+user.id}>\r\n                            <img src={user.photos.small != null ? user.photos.small : userImg}/>\r\n                        </NavLink>\r\n                        <div>\r\n                            {user.followed ? <button disabled={followingIsProgress.some(id=>id===user.id)}\r\n                                                  onClick={() => unfollow(user.id)}>unfollow</button> :\r\n\r\n                                <button disabled={followingIsProgress.some(id=>id===user.id)}\r\n                                        onClick={() => follow(user.id)}>follow</button>}\r\n                        </div>\r\n                    </div>\r\n                    <div className={s.fullname}>\r\n                        <div>{user.name}</div>\r\n                        <div>{user.status}</div>\r\n                    </div>\r\n                    <div className={s.location}>\r\n                        <div>{\"u.location.city\"}</div>\r\n                        <div>{\"u.location.country\"}</div>\r\n                    </div>\r\n\r\n                </div>\r\n    )\r\n}\r\n\r\n\r\nexport default User;","import React from 'react'\r\nimport {Field, Form, Formik} from \"formik\"\r\nimport {FilterType} from \"../redux/redusers/usersReducer\";\r\n\r\n\r\n// @ts-ignore\r\nconst usersSearchFormValidate = (values)=>{\r\n        const errors = {}\r\n        return errors;\r\n}\r\n\r\ntype FormsType= {\r\n  term: string\r\n  friend: \"null\" | \"true\" | \"false\"\r\n}\r\n\r\nconst UsersSearchForm = React.memo(({onFilterChanged, isFetching}: any)=> {\r\n    debugger\r\n    const submit= (values: FormsType) => {\r\n       const filter: FilterType  ={\r\n           term: values.term,\r\n           friend: values.friend===\"null\" ? null : values.friend===\"true\" ? true : false\r\n       }\r\n        onFilterChanged(filter)\r\n    }\r\n\r\n\r\n    return  <div>\r\n        <Formik\r\n            initialValues={{ term: '', friend: \"null\"}}\r\n            validate={usersSearchFormValidate}\r\n            onSubmit={submit}\r\n        >\r\n            {(props) => (\r\n                <Form>\r\n                    <Field type=\"text\" name=\"term\" />\r\n                    <Field as=\"select\" name=\"friend\">\r\n                        <option value=\"null\">All</option>\r\n                        <option value=\"true\">Followed</option>\r\n                        <option value=\"false\">Unfollowed</option>\r\n                    </Field>\r\n                    <button type=\"submit\" disabled={isFetching}>\r\n                        Find\r\n                    </button>\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    </div>\r\n})\r\n\r\nexport default UsersSearchForm;","export const updateObjectInArray = (items, itemId, objPropName, newObjProps) =>{\r\n  return  items.map(u=> {\r\n        if(u[objPropName]===itemId){\r\n           return { ...u, ...newObjProps}\r\n        }\r\n        return u\r\n    })\r\n}","import {updateObjectInArray} from \"../../utils/helpers/object-helpers\"\r\nimport {UserType} from \"../../Types/types\"\r\nimport {Dispatch} from \"redux\"\r\nimport {AppStateType, BaseThunkType, InferActionsTypes} from \"../redux-store\"\r\nimport {userApi} from \"../../api/user.api\"\r\nimport {APIResponseType} from \"../../api/api\"\r\n\r\nconst FOLLOW='network/users/FOLLOW'\r\nconst UNFOLLOW='network/users/UNFOLLOW'\r\nconst SET_USERS='network/users/SET_USERS'\r\nconst SET_CURRENT_PAGE='network/users/SET_CURRENT_PAGE'\r\nconst SET_FILTER='network/users/SET_FILTER'\r\nconst SET_TOTAL_USERS_COUNT='network/users/SET_TOTAL_USERS_COUNT'\r\nconst TOGGLE_IS_FETCHING='network/users/TOGGLE_IS_FETCHING'\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS='network/users/TOGGLE_IS_FOLLOWING_PROGRESS'\r\n\r\n\r\nlet initialState = {\r\n    users: [] as Array<UserType>,\r\n    pageSize: 10,\r\n    totalUsersCount: 21,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    followingIsProgress: [] as Array<number> ,  // array of users id\r\n    filter: {\r\n        term: \"\",\r\n        friend: null as null | boolean\r\n    }\r\n}\r\n\r\n\r\nconst usersReducer=(state=initialState, action: ActionsTypes)=>{\r\n        switch(action.type)\r\n        {\r\n            case FOLLOW:\r\n                return {\r\n                    ...state,\r\n                    users: updateObjectInArray(state.users, action.userId, \"id\", {followed: true})\r\n                }\r\n            case UNFOLLOW:\r\n                return {\r\n                    ...state,\r\n                    users: updateObjectInArray(state.users, action.userId, \"id\", {followed: false})\r\n                }\r\n            case SET_USERS:\r\n                return {...state, users: action.users }\r\n            case SET_CURRENT_PAGE:\r\n                return {...state, currentPage: action.pageNumber }\r\n            case SET_FILTER:\r\n                return {...state,  filter: action.filter}\r\n            case SET_TOTAL_USERS_COUNT:\r\n                return {...state, totalUsersCount: action.count }\r\n            case TOGGLE_IS_FETCHING:\r\n                return {...state, isFetching: action.isFetching }\r\n            case TOGGLE_IS_FOLLOWING_PROGRESS:\r\n                return {\r\n                    ...state,\r\n                    followingIsProgress: action.isFetching ?\r\n                        [...state.followingIsProgress, action.userId]\r\n                        : state.followingIsProgress.filter((id)=>id!=action.userId)\r\n\r\n                }\r\n            default: return state;\r\n        }\r\n    }\r\n\r\n\r\nexport const actions ={\r\n    followSuccess:(userId: number)=>({type: FOLLOW, userId } as const ),\r\n    unfollowSuccess:(userId: number)=>({type: UNFOLLOW, userId} as const),\r\n    setUsers:(users: Array<UserType>)=>({type: SET_USERS, users} as const),\r\n    setCurrentPage:(pageNumber: number)=>({type: SET_CURRENT_PAGE, pageNumber} as const),\r\n    setFilter: (filter: FilterType)=>({type: SET_FILTER, filter} as const),\r\n    setTotalUsersCount:(count: number)=>({type: SET_TOTAL_USERS_COUNT, count} as const),\r\n    toggleIsFetching:(isFetching: boolean)=>({type: TOGGLE_IS_FETCHING, isFetching} as const),\r\n    toggleFollowingProgress:(isFetching: boolean, userId: number)=>({type: TOGGLE_IS_FOLLOWING_PROGRESS, isFetching, userId} as const)\r\n}\r\n\r\n\r\n\r\ntype GetStateType = ()=> AppStateType\r\ntype DispatchType = Dispatch<ActionsTypes>\r\n\r\nexport const requestUsers=(currentPage: number, pageSize: number, filter: FilterType)\r\n    : ThunkType => async (dispatch)=> {\r\n    dispatch(actions.toggleIsFetching(true));\r\n    dispatch(actions.setCurrentPage(currentPage))\r\n    dispatch(actions.setFilter(filter))\r\n    let data = await userApi.getUsers(currentPage, pageSize, filter)\r\n        dispatch(actions.toggleIsFetching(false));\r\n        dispatch(actions.setUsers(data.items));\r\n        dispatch(actions.setTotalUsersCount(data.totalCount))\r\n}\r\nconst _followUnfollowFlow = async (dispatch: DispatchType, userId: number, apiMethod: (userId: number)=>Promise<APIResponseType>, actionCreator: (userId: number)=> ActionsTypes ) =>{\r\n    dispatch(actions.toggleFollowingProgress(true, userId))\r\n    let data = await apiMethod(userId)\r\n    if (data.resultCode === 0) {\r\n        dispatch(actionCreator(userId))\r\n    }\r\n    dispatch(actions.toggleFollowingProgress(false, userId))\r\n}\r\n\r\n\r\n\r\nexport const follow=(userId: number)=> async (dispatch: DispatchType)=> {\r\n   await _followUnfollowFlow(dispatch, userId,  userApi.follow.bind(userApi), actions.followSuccess);\r\n}\r\nexport const unfollow=(userId: number)=> async (dispatch: DispatchType)=> {\r\n       await _followUnfollowFlow(dispatch, userId, userApi.unfollow.bind(userApi), actions.unfollowSuccess)\r\n    }\r\n\r\n\r\nexport default usersReducer;\r\n\r\nexport type initialStateType = typeof initialState\r\nexport type FilterType = typeof initialState.filter\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\ntype  ThunkType = BaseThunkType<ActionsTypes>","import {AppStateType} from \"../redux-store\";\r\n\r\n\r\nexport const getUsers = (state: AppStateType) =>{\r\n    return state.usersPage.users\r\n}\r\n\r\nexport const getPageSize = (state: AppStateType)=>{\r\n    return state.usersPage.pageSize\r\n}\r\n\r\nexport const getTotalUsersCount = (state: AppStateType)=>{\r\n    return state.usersPage.totalUsersCount\r\n}\r\n\r\nexport const getCurrentPage = (state: AppStateType)=>{\r\n    return state.usersPage.currentPage\r\n}\r\n\r\n\r\nexport const getIsFetching = (state: AppStateType)=>{\r\n    return state.usersPage.isFetching\r\n}\r\n\r\n\r\nexport const getFollowingIsProgress = (state: AppStateType)=>{\r\n    return state.usersPage.followingIsProgress\r\n}\r\nexport const getFilter = (state: AppStateType)=>{\r\n    return state.usersPage.filter\r\n}\r\n\r\n","import React, {useEffect} from 'react';\r\nimport Paginator from \"../common/Paginator/Paginator\";\r\nimport User from \"./User\";\r\nimport UsersSearchForm from \"./UsersSearchForm\";\r\nimport {actions, FilterType, follow, requestUsers, unfollow} from \"../redux/redusers/usersReducer\";\r\nimport {\r\n    getCurrentPage,\r\n    getFilter, getFollowingIsProgress,\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n    getUsers\r\n} from \"../redux/redusers/users-selectors\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\n\r\ntype PropsType ={\r\n    isFetching: boolean\r\n}\r\n\r\n\r\nexport const Users: React.FC<PropsType> = (props) => {\r\n    const users = useSelector(getUsers)\r\n    const currentPage = useSelector(getCurrentPage)\r\n    const totalUsersCount = useSelector(getTotalUsersCount)\r\n    const pageSize = useSelector(getPageSize)\r\n    const filter = useSelector(getFilter)\r\n    const followingIsProgress = useSelector(getFollowingIsProgress)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(requestUsers(currentPage, pageSize, {term: \"\", friend: null}))\r\n    }, [])\r\n\r\n    const onPageChanged = (pageNumber: number) => {\r\n        dispatch(actions.setCurrentPage(pageNumber))\r\n        dispatch(requestUsers(pageNumber, pageSize, filter))\r\n    }\r\n\r\n    const onFilterChanged = (filter: FilterType) => {\r\n        dispatch(requestUsers(1, pageSize, filter))\r\n    }\r\n    const followCallback = (userId: number) => {\r\n        dispatch(follow(userId))\r\n    }\r\n    const unfollowCallback  = (userId: number) => {\r\n        dispatch(unfollow(userId))\r\n    }\r\n\r\n\r\n    return <div>\r\n        <UsersSearchForm onFilterChanged={onFilterChanged} isFetching={props.isFetching}/>\r\n        <Paginator currentPage={currentPage}\r\n                   portionSize={10}\r\n                   onPageChanged={onPageChanged}\r\n                   totalItemsCount={totalUsersCount}\r\n                   pageSize={pageSize}/>\r\n        {users.map((u:any) => <User user={u}\r\n                                followingIsProgress={followingIsProgress}\r\n                                follow={followCallback}\r\n                                    unfollow={unfollowCallback}\r\n                                key={u.id}/>)}\r\n    </div>\r\n}","import React from 'react';\r\nimport {useSelector} from 'react-redux';\r\nimport {Users} from './UsersC'\r\nimport Preloader from \"../common/preloader/preloader\"\r\nimport {getIsFetching} from \"../redux/redusers/users-selectors\"\r\n\r\n\r\ntype UsersPagePropsType = {\r\n    title: string\r\n}\r\n\r\n\r\nexport const UsersPage: React.FC<UsersPagePropsType> = (props) => {\r\n    const isFetching = useSelector(getIsFetching)\r\n        return (<>\r\n            <h2>{props.title}</h2>\r\n            {isFetching ? <Preloader /> : null}\r\n            <div><Users isFetching={isFetching}/>\r\n            </div>\r\n            </>)\r\n\r\n}\r\n","import React from 'react'\r\nimport logo from '../assets/images/dzone.svg'\r\nimport s from './Header.module.css'\r\nimport {NavLink} from 'react-router-dom'\r\nimport {Layout, Button} from 'antd'\r\n\r\n\r\ntype HeaderType = {\r\n    isAuth: boolean\r\n    login: string | null\r\n    logout: ()=> void\r\n}\r\n\r\n\r\nconst Header: React.FC<HeaderType>  = (props) => {\r\n\r\n    return (\r\n        <header className={s.header}>\r\n            <Layout.Header>\r\n\r\n            <NavLink to='/profile' activeClassName=\"navbar-brand\">\r\n                <img src={logo} width=\"50\" height=\"50\"\r\n                     className=\"logo\" alt=\"logo\" loading=\"lazy\"/>\r\n                     Mirage\r\n            </NavLink>\r\n\r\n\r\n    <div className={s.loginBlock}>\r\n        {props.isAuth ? <div> <span className={s.login}>{props.login}</span>\r\n                <Button onClick={props.logout}>Log out</Button>\r\n            </div>\r\n            : <NavLink to={'/login'}>Login</NavLink>}\r\n\r\n    </div>\r\n            </Layout.Header>\r\n        </header>\r\n\r\n    )\r\n}\r\n\r\nexport default Header","import {instance, APIResponseType, ResultCodeForCaptcha} from \"./api\"\r\n\r\ntype LoginMeResponseType ={\r\n    data: {userId: number}\r\n}\r\nexport type MeResponseType ={\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\n\r\nexport const AuthApi = {\r\n    me() {\r\n        return instance.get<APIResponseType<MeResponseType>>(`auth/me`).then(response => response.data)\r\n    },\r\n    login(email: string, password: string, rememberMe = false, captcha: null | string) {\r\n        return instance.post<APIResponseType<LoginMeResponseType>>(`auth/login`, {email, password, rememberMe, captcha})\r\n            .then(response => response.data)\r\n    },\r\n    logout() {\r\n        return instance.delete(`auth/login`)\r\n    }\r\n}","import {instance} from \"./api\";\r\n\r\ntype GetCaptchaUrlResponseType ={\r\n    url: string\r\n}\r\n\r\nexport const securityApi = {\r\n    getCaptchaUrl() {\r\n        return instance.get<GetCaptchaUrlResponseType>(`security/get-captcha-url`).then(response=>response.data)\r\n    }\r\n}","import {ResultCodeEnum} from \"../../api/api\";\r\nimport {ActionTypes, stopSubmit} from \"redux-form\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {AppStateType, BaseThunkType, InferActionsTypes} from \"../redux-store\";\r\nimport {AuthApi} from \"../../api/auth.api\";\r\nimport {securityApi} from \"../../api/security.api\";\r\nimport {Action} from \"redux\";\r\n\r\n\r\nconst SET_USER_DATA='network/auth/SET_USER_DATA';\r\nconst SET_CAPTCHA_URL='network/auth/SET_CAPTCHA_URL';\r\n\r\n\r\nlet initialState = {\r\n        userId: null as number | null,\r\n        email: null as string | null,\r\n        login: null as string | null,\r\n        isAuth: false,\r\n        captchaUrl: null as string | null\r\n\r\n}\r\n\r\n\r\n    const authReduser=(state=initialState, action: ActionsTypes): initialStateType=>{\r\n        switch(action.type)\r\n        {\r\n            case SET_USER_DATA:\r\n            case SET_CAPTCHA_URL:\r\n                return {\r\n                    ...state,\r\n                    ...action.payload\r\n                }\r\n\r\n            default: return state;\r\n        }\r\n    }\r\n\r\nconst actions = {\r\n    setAuthUserData: (userId: number | null, email: string | null, login: string | null, isAuth: boolean) =>({type: SET_USER_DATA, payload:  {userId, email, login, isAuth } } as const),\r\n    setCaptchaUrl: (captchaUrl: string) =>({type: SET_CAPTCHA_URL, payload: {captchaUrl} } as const)\r\n}\r\n\r\n\r\n\r\nexport const getAuthUserData = (): ThunkType=> async (dispatch)=>{\r\n    let meData = await AuthApi.me();\r\n            if(meData.resultCode===ResultCodeEnum.Success){\r\n                let {id, email, login} = meData.data\r\n                dispatch(actions.setAuthUserData(id, email, login, true))\r\n            }\r\n    }\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string | null)\r\n    : ThunkType=> async (dispatch)=>{\r\n let data = await  AuthApi.login(email, password, rememberMe, captcha)\r\n            if(data.resultCode===ResultCodeEnum.Success) {\r\n                dispatch(getAuthUserData())\r\n            } else {\r\n                if(data.resultCode===ResultCodeEnum.CaptchaIsRequired){\r\n                    dispatch(getCaptchaUrl())\r\n                }\r\n                let message=data.messages.length>0 ? data.messages[0] : \"some error\"\r\n                dispatch(stopSubmit(\"login\", {_error: message}))\r\n            }\r\n\r\n}\r\n\r\nexport const getCaptchaUrl = (): ThunkType=> async (dispatch)=>{\r\n    const data = await  securityApi.getCaptchaUrl()\r\n    const captchaUrl = data.url\r\n    dispatch(actions.setCaptchaUrl(captchaUrl))\r\n    }\r\n\r\n\r\n\r\nexport const logout = (): ThunkType=> async (dispatch)=>{\r\n       let response = await AuthApi.logout()\r\n            if(response.data.resultCode===ResultCodeEnum.Success){\r\n                dispatch(actions.setAuthUserData(null, null, null, false))\r\n            }\r\n}\r\n\r\nexport default authReduser;\r\n\r\ntype initialStateType = typeof initialState\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsTypes | ReturnType<typeof stopSubmit>>","import React from 'react';\r\nimport Header from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport {logout} from \"../redux/redusers/auth_reduser\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\n\r\n\r\ntype MapStateType = {\r\n    isAuth: boolean\r\n    login: string | null\r\n}\r\n\r\ntype MapDispatchType = {\r\n    logout: ()=> void\r\n}\r\n\r\ntype OwnType ={\r\n\r\n}\r\ntype HeaderType = MapStateType & MapDispatchType & OwnType\r\n\r\n\r\nclass HeaderContainer extends React.Component<HeaderType> {\r\n\r\n\r\n    render(){\r\n    return <div>\r\n            <Header {...this.props}/>\r\n    </div>\r\n\r\n    }\r\n}\r\n\r\nconst mapStateToProps=(state: AppStateType)=>(\r\n    {\r\n        isAuth: state.auth.isAuth,\r\n            login: state.auth.login\r\n    }\r\n)\r\n\r\n\r\nexport default  connect<MapStateType, MapDispatchType, OwnType, AppStateType>(mapStateToProps, {logout})(HeaderContainer);","import React from 'react';\r\nimport {reduxForm, InjectedFormProps} from 'redux-form';\r\nimport {login} from \"../redux/redusers/auth_reduser\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {createField, GetStringKeys, Input} from \"../common/FormsControls/FormsControls\";\r\nimport {requiredField} from \"../utils/validators/validators\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport style from '../common/FormsControls/FormControls.module.css'\r\nimport {AppStateType} from \"../redux/redux-store\";\r\n\r\n\r\ntype LoginFormOwnProps ={\r\n    captchaUrl: string | null\r\n}\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<LoginFormValuesType, LoginFormOwnProps> & LoginFormOwnProps> =({handleSubmit, error, captchaUrl})=>{\r\n    return(\r\n        <form onSubmit={handleSubmit}>\r\n            {createField<LoginFormValuesTypeKeys>(\"login\", \"email\", [requiredField], Input, \"\")}\r\n            {createField<LoginFormValuesTypeKeys>(\"password\", \"password\", [requiredField], Input, \"password\" )}\r\n            {createField<LoginFormValuesTypeKeys>(undefined, \"rememberMe\", [],Input , \"checkbox\", {} ,\"remember me\" )}\r\n\r\n            {captchaUrl && <img src={captchaUrl}/> }\r\n            {captchaUrl && createField<LoginFormValuesTypeKeys>(\"Symbols of captcha\", \"captcha\", [requiredField],Input,  \"\") }\r\n                {error && <div className={style.formSummaryError}> {error}</div> }\r\n                <div>\r\n                    <button>Login</button>\r\n                </div>\r\n\r\n            </form>\r\n    )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm<LoginFormValuesType, LoginFormOwnProps>({ form: 'login'})(LoginForm);\r\n\r\n\r\nexport type LoginFormValuesType ={\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: string | null\r\n}\r\n\r\ntype LoginFormValuesTypeKeys = GetStringKeys<LoginFormValuesType>\r\n\r\n\r\nexport const LoginPage: React.FC =(props)=>{\r\n    const isAuth = useSelector((state: AppStateType)=>state.auth.isAuth)\r\n    const captchaUrl = useSelector((state: AppStateType)=>state.auth.captchaUrl)\r\n    const dispatch = useDispatch()\r\n    const onSubmitClick=(formData: LoginFormValuesType)=>{\r\n        dispatch(login(formData.email, formData.password, formData.rememberMe, formData.captcha))\r\n    }\r\n if(isAuth){\r\n return <Redirect to={\"/profile\"}/>\r\n }\r\n    return(\r\n        <div>\r\n            <h1>Login</h1>\r\n         <LoginReduxForm onSubmit={onSubmitClick} captchaUrl={captchaUrl}/>\r\n        </div>\r\n\r\n    )\r\n}\r\n","\r\nimport {getAuthUserData} from \"./auth_reduser\"\r\nimport {InferActionsTypes} from \"../redux-store\";\r\n\r\nconst INITIALIZED_SUCCESS='network/app/INITIALIZED_SUCCESS'\r\n\r\nlet initialState= {\r\n        initialized: false\r\n}\r\n\r\nexport type initialStateType = typeof initialState\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\n\r\n    const appReduser=(state=initialState, action: ActionsTypes)=>{\r\n        switch(action.type)\r\n        {\r\n            case INITIALIZED_SUCCESS:\r\n                return {\r\n                    ...state,\r\n                    initialized: true\r\n                }\r\n\r\n            default: return state;\r\n        }\r\n    }\r\n\r\n\r\n\r\nexport const actions = {\r\n   initializedSuccess: () =>({type: INITIALIZED_SUCCESS } as const)\r\n}\r\n\r\nexport const initializeApp = ()=>(dispatch: any)=> {\r\n    const promise = dispatch(getAuthUserData())\r\n    promise.then(()=>dispatch(actions.initializedSuccess()))\r\n\r\n}\r\n\r\nexport default appReduser;\r\n\r\n\r\n\r\n\r\n\r\n","\r\nlet initialState={};\r\n\r\ntype initialStateType = typeof initialState\r\n\r\nconst sidebarReducer=(state=initialState, action: any )=>{\r\n    return state;\r\n\r\n}\r\n\r\n\r\nexport default sidebarReducer;\r\n\r\n\r\n\r\n","import {createStore, combineReducers, applyMiddleware, compose, Action} from 'redux';\r\nimport dialogsReducer from \"./redusers/dialogsRedusers\";\r\nimport profileReducer from \"./redusers/profileRedusers\";\r\nimport sidebarReducer from \"./redusers/sidebarRedusers\";\r\nimport usersReducer from \"./redusers/usersReducer\";\r\nimport authReduser from \"./redusers/auth_reduser\";\r\nimport appReduser from \"./redusers/app_reduser\";\r\nimport thunkMiddleware, {ThunkAction} from 'redux-thunk';\r\nimport {reducer as formReduser} from 'redux-form';\r\n\r\nlet reducers = combineReducers({\r\n    dialogsPage: dialogsReducer,\r\n    profilePage: profileReducer,\r\n    sidebarReducer: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReduser,\r\n    form: formReduser,\r\n    app: appReduser\r\n})\r\n\r\ntype RootReducerType = typeof reducers;\r\n\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\nexport type InferActionsTypes<T> = T extends {[key: string]: (...args: any [])=> infer U } ? U : never\r\n\r\nexport type BaseThunkType<A extends Action, R = Promise<void>> =  ThunkAction<R, AppStateType, unknown, A>\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunkMiddleware)))\r\n// @ts-ignore\r\nwindow.store= store\r\n/*\r\nlet store=createStore(reducers, applyMiddleware(thunkMiddleware))\r\n*/\r\n\r\nexport default store","import React from \"react\";\r\n\r\n\r\n\r\nexport function withSuspense <WCP>(WrappedComponent: React.ComponentType<WCP>) {\r\n   return  (props: WCP) => {\r\n        return <React.Suspense fallback={<div>loading...</div>}>\r\n            <WrappedComponent {...props} />\r\n        </React.Suspense>\r\n\r\n    }\r\n\r\n}\r\n\r\n","import react from 'react'\r\nimport {Layout} from \"antd\";\r\nimport React from \"react\";\r\n\r\n\r\n\r\nconst Footer = ()=>{\r\n    return <Layout.Footer>Footer</Layout.Footer>\r\n}\r\n\r\n\r\nexport default Footer;","import React from 'react';\nimport {Layout} from \"antd\";\nimport  './App.css';\nimport Navbar from './Navbar/Navbar';\nimport {HashRouter, Redirect, Route, Switch, withRouter} from \"react-router-dom\";\nimport {UsersPage} from \"./Users/UsersContainer\";\nimport HeaderContainer from \"./Header/HeaderContainer\";\nimport {LoginPage} from \"./Login/Login\";\nimport {connect, Provider} from \"react-redux\";\nimport {compose} from \"redux\";\nimport {initializeApp} from \"./redux/redusers/app_reduser\";\nimport Preloader from \"./common/preloader/preloader\";\nimport store, {AppStateType} from \"./redux/redux-store\";\nimport {withSuspense} from \"./Hoc/withSuspense\";\nimport Footer from \"./Footer/Footer\";\nconst DialogsContainer = React.lazy(()=> import ('./Dialogs/DialogsContainer'))\nconst ProfileContainer = React.lazy(()=> import ('./Profile/ProfileContainer'))\n\ntype MapPropsType = ReturnType<typeof mapStateToProps>\ntype DispatchPropsType = {\n    initializeApp: ()=> void\n}\n\nconst SuspendedDialogs = withSuspense(DialogsContainer)\nconst SuspendedProfile = withSuspense(ProfileContainer)\n\nclass App extends React.Component<MapPropsType & DispatchPropsType> {\n    catchAllUnhandledErrors=(e:PromiseRejectionEvent)=>{\n        alert(\"SOme error occured\")\n        console.error(e)\n    }\n  componentDidMount(){\n      window.addEventListener(\"unhandledrejection\" ,  this.catchAllUnhandledErrors)\n  this.props.initializeApp();\n  }\n componentWillUnmount(){\n     window.removeEventListener(\"unhandledrejection\" ,  this.catchAllUnhandledErrors)\n }\n\n  render() {\n    if(!this.props.initialized){\n      return  <Preloader/>\n    }\n    return (\n        <Layout>\n        {  /* <div className='container'> */ }\n\n            <HeaderContainer/>\n            <Layout>\n                <Navbar/>\n                <Layout.Content>\n                    <Switch>\n                        <Route exact path='/' render=\n                            {() => <Redirect to={\"/profile\"}/>}/>\n                        <Route path='/dialogs' render={() => <SuspendedDialogs />}/>\n                        <Route path='/profile/:userId?' render={() => <SuspendedProfile/>}/>\n                        <Route path='/users' render={() => <UsersPage title=\"Users\"/>}/>\n                        <Route path='/login' render={() => <LoginPage/>}/>\n                        <Route path='*' render=\n                            {() => <div>404 NOT FOUND</div>}/>\n                    </Switch>\n                    </Layout.Content>\n            </Layout>\n            <Footer/>\n\n            { /* <HeaderContainer/>\n          <Navbar/>\n          <div className='app-wrap-content'>\n              <Switch>\n                      <Route exact path='/' render=\n                      {() => <Redirect to={\"/profile\"}/>}/>\n                      <Route path='/dialogs' render={() => <SuspendedDialogs />}/>\n                      <Route path='/profile/:userId?' render={() => <SuspendedProfile/>}/>\n                      <Route path='/users' render={() => <UsersContainer title=\"Users\"/>}/>\n                      <Route path='/login' render={() => <Login/>}/>\n                      <Route path='*' render=\n                      {() => <div>404 NOT FOUND</div>}/>\n\n              </Switch>\n          </div>*/}\n      { /*</div>*/}\n        </Layout>\n    );\n  }\n}\n\nconst mapStateToProps =(state: AppStateType) => ({\n  initialized: state.app.initialized\n})\n\nconst AppContainer = compose<React.ComponentType>(\n    withRouter,\n    connect(mapStateToProps, {initializeApp})\n)(App)\n\nconst MainApp: React.FC = () =>{\n  return  <HashRouter>\n        <Provider store={store}>\n            <AppContainer />\n        </Provider>\n    </HashRouter>\n}\n\n\nexport default MainApp;","import 'antd/dist/antd.css'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport ReactDOM from \"react-dom\"\nimport React from \"react\"\nimport * as serviceWorker from './serviceWorker'\nimport MainApp from \"./App\"\n\n\n        ReactDOM.render(\n            <MainApp/>,\n        document.getElementById('root')\n    );\n\nserviceWorker.unregister();\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbar\":\"Navbar_navbar__2UfJ3\",\"item\":\"Navbar_item__2OT8x\",\"active\":\"Navbar_active__2hWB8\"};","import React from \"react\";\r\nimport style from \"./FormControls.module.css\";\r\nimport {Field, WrappedFieldMetaProps, WrappedFieldProps} from \"redux-form\";\r\nimport {ValidatorType} from \"../../utils/validators/validators\";\r\nimport {LoginFormValuesType} from \"../../Login/Login\";\r\n\r\n\r\ntype FormControlPropsType = {\r\n    meta: WrappedFieldMetaProps\r\n}\r\n\r\n\r\nconst FormControl:  React.FC<FormControlPropsType> = ({meta, children}) =>{\r\n    debugger\r\n            let hasError = meta.touched && meta.error\r\n        return  <div className={style.formControl + \" \" + (hasError ? style.error : \"\")}>\r\n                <div>\r\n                    {children}\r\n                </div>\r\n                {hasError && <span>{meta.error}</span>}\r\n            </div>\r\n}\r\n\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props)=>{\r\n    let {input, meta,...restprops}  = props\r\n    return <FormControl {...props} ><textarea {...input}  {...restprops}/></FormControl>\r\n}\r\n\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = (props)=>{\r\n    debugger\r\n    let {input, meta, ...restprops}  = props\r\n    return <FormControl {...props}><input {...input}  {...restprops}/></FormControl>\r\n}\r\n\r\n\r\n\r\nexport function createField<FormKeysType extends string> (placeholder: string | undefined, name: FormKeysType,\r\n                            validators: Array<ValidatorType>,\r\n                            component:  React.FC<WrappedFieldProps>,\r\n                            type: string, props={}, text=\"\" ) {\r\n return   <div>\r\n    <Field placeholder={placeholder}\r\n           name={name}\r\n           validate={validators}\r\n           component={component}\r\n           type={type}\r\n           {...props}/>{text}\r\n    </div>\r\n}\r\n\r\nexport type GetStringKeys<T> = Extract<keyof T, string>","import {APIResponseType, GetItemsType, instance} from \"./api\";\r\nimport {profileApi} from \"./profile.api\";\r\nimport {FilterType} from \"../redux/redusers/usersReducer\";\r\n\r\n\r\n\r\nexport const userApi = {\r\n    getUsers(currentPage = 1, pageSize = 10, filter: FilterType) {\r\n            let term = filter[\"term\"] ? `&term=${filter[\"term\"]}`: \"\"\r\n            let friend = (filter[\"friend\"]!==null && filter[\"friend\"]!==undefined)  ? `&friend=${filter[\"friend\"]}` : \"\"\r\n        debugger\r\n        return instance.get<GetItemsType>(`users?page=${currentPage}&count=${pageSize}` + term + friend)\r\n            .then(response => response.data)\r\n    },\r\n    follow(id: number) {\r\n        return instance.post<APIResponseType>(`follow/${id}`)\r\n            .then(response => response.data)\r\n    },\r\n    unfollow(id: number) {\r\n        return instance.delete<ResponseType>(`follow/${id}`)\r\n            .then(response => response.data) as Promise<APIResponseType>\r\n    },\r\n    getProfile(userId: number) {\r\n        console.warn('Obsolete method. Please profileApi object')\r\n        return profileApi.getProfile(userId)\r\n    }\r\n}","import {ContactsType, PhotosType, ProfileType} from \"../Types/types\";\r\nimport {instance, APIResponseType, ResultCodeEnum, ResultCodeForCaptcha} from \"./api\";\r\n\r\ntype SavePhotoResponseType = {\r\n    photos: PhotosType\r\n}\r\n\r\nexport const profileApi = {\r\n    getProfile(userId: number) {\r\n        return instance.get<ProfileType & ContactsType & PhotosType>(`profile/${userId}`).then(response => response.data)\r\n    },\r\n    getStatus(userId: number) {\r\n        return instance.get<string>(`profile/status/${userId}`).then(response=>response.data)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put<APIResponseType>(`profile/status`, {status: status}).then(response=>response.data)\r\n    },\r\n    savePhoto(file: File) {\r\n        let formData = new FormData;\r\n        formData.append(\"image\", file)\r\n        return instance.put<APIResponseType<SavePhotoResponseType>>\r\n        (`/profile/photo`, formData, {headers: {'Content-Type': 'multipart//form-data'}}).then(response=>response.data)\r\n    },\r\n    updateProfileData(formData: ProfileType) {\r\n        return instance.put<APIResponseType>(`/profile`, formData).then(response=>response.data)\r\n    }\r\n\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormControls_formControl__gMG4i\",\"error\":\"FormControls_error__R5utC\",\"formSummaryError\":\"FormControls_formSummaryError__3lvq1\"};"],"sourceRoot":""}